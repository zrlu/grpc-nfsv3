// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nfs.proto

#include "nfs.pb.h"
#include "nfs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nfs {

static const char* NFS_method_names[] = {
  "/nfs.NFS/NFSPROC_NULL",
  "/nfs.NFS/NFSPROC_GETATTR",
  "/nfs.NFS/NFSPROC_MKNOD",
};

std::unique_ptr< NFS::Stub> NFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NFS::Stub> stub(new NFS::Stub(channel));
  return stub;
}

NFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NFSPROC_NULL_(NFS_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NFSPROC_GETATTR_(NFS_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NFSPROC_MKNOD_(NFS_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NFS::Stub::NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::nfs::NULLres* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NFSPROC_NULL_, context, request, response);
}

void NFS::Stub::experimental_async::NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_NULL_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_NULL_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_NULL_, context, request, response, reactor);
}

void NFS::Stub::experimental_async::NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_NULL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nfs::NULLres>* NFS::Stub::AsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::NULLres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_NULL_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfs::NULLres>* NFS::Stub::PrepareAsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::NULLres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_NULL_, context, request, false);
}

::grpc::Status NFS::Stub::NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::nfs::GETATTRres* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NFSPROC_GETATTR_, context, request, response);
}

void NFS::Stub::experimental_async::NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_GETATTR_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_GETATTR_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_GETATTR_, context, request, response, reactor);
}

void NFS::Stub::experimental_async::NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_GETATTR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>* NFS::Stub::AsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::GETATTRres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_GETATTR_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>* NFS::Stub::PrepareAsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::GETATTRres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_GETATTR_, context, request, false);
}

::grpc::Status NFS::Stub::NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::nfs::MKNODres* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NFSPROC_MKNOD_, context, request, response);
}

void NFS::Stub::experimental_async::NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_MKNOD_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_MKNOD_, context, request, response, std::move(f));
}

void NFS::Stub::experimental_async::NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_MKNOD_, context, request, response, reactor);
}

void NFS::Stub::experimental_async::NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NFSPROC_MKNOD_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>* NFS::Stub::AsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::MKNODres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_MKNOD_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>* NFS::Stub::PrepareAsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nfs::MKNODres>::Create(channel_.get(), cq, rpcmethod_NFSPROC_MKNOD_, context, request, false);
}

NFS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFS::Service, ::nfs::NULLargs, ::nfs::NULLres>(
          std::mem_fn(&NFS::Service::NFSPROC_NULL), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFS::Service, ::nfs::GETATTRargs, ::nfs::GETATTRres>(
          std::mem_fn(&NFS::Service::NFSPROC_GETATTR), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFS::Service, ::nfs::MKNODargs, ::nfs::MKNODres>(
          std::mem_fn(&NFS::Service::NFSPROC_MKNOD), this)));
}

NFS::Service::~Service() {
}

::grpc::Status NFS::Service::NFSPROC_NULL(::grpc::ServerContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::NFSPROC_GETATTR(::grpc::ServerContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::NFSPROC_MKNOD(::grpc::ServerContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nfs

