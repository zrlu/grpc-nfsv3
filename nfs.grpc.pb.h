// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nfs.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_nfs_2eproto__INCLUDED
#define GRPC_nfs_2eproto__INCLUDED

#include "nfs.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace nfs {

// Interface exported by the server.
class NFS final {
 public:
  static constexpr char const* service_full_name() {
    return "nfs.NFS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::nfs::NULLres* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>> AsyncNFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>>(AsyncNFSPROC_NULLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>> PrepareAsyncNFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>>(PrepareAsyncNFSPROC_NULLRaw(context, request, cq));
    }
    virtual ::grpc::Status NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::nfs::GETATTRres* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>> AsyncNFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>>(AsyncNFSPROC_GETATTRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>> PrepareAsyncNFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>>(PrepareAsyncNFSPROC_GETATTRRaw(context, request, cq));
    }
    virtual ::grpc::Status NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::nfs::MKNODres* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>> AsyncNFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>>(AsyncNFSPROC_MKNODRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>> PrepareAsyncNFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>>(PrepareAsyncNFSPROC_MKNODRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>* AsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::NULLres>* PrepareAsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>* AsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::GETATTRres>* PrepareAsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>* AsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::MKNODres>* PrepareAsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::nfs::NULLres* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>> AsyncNFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>>(AsyncNFSPROC_NULLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>> PrepareAsyncNFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>>(PrepareAsyncNFSPROC_NULLRaw(context, request, cq));
    }
    ::grpc::Status NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::nfs::GETATTRres* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>> AsyncNFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>>(AsyncNFSPROC_GETATTRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>> PrepareAsyncNFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>>(PrepareAsyncNFSPROC_GETATTRRaw(context, request, cq));
    }
    ::grpc::Status NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::nfs::MKNODres* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>> AsyncNFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>>(AsyncNFSPROC_MKNODRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>> PrepareAsyncNFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>>(PrepareAsyncNFSPROC_MKNODRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_NULL(::grpc::ClientContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NFSPROC_NULL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::NULLres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NFSPROC_GETATTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::GETATTRres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, std::function<void(::grpc::Status)>) override;
      void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NFSPROC_MKNOD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nfs::MKNODres* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>* AsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfs::NULLres>* PrepareAsyncNFSPROC_NULLRaw(::grpc::ClientContext* context, const ::nfs::NULLargs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>* AsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfs::GETATTRres>* PrepareAsyncNFSPROC_GETATTRRaw(::grpc::ClientContext* context, const ::nfs::GETATTRargs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>* AsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfs::MKNODres>* PrepareAsyncNFSPROC_MKNODRaw(::grpc::ClientContext* context, const ::nfs::MKNODargs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NFSPROC_NULL_;
    const ::grpc::internal::RpcMethod rpcmethod_NFSPROC_GETATTR_;
    const ::grpc::internal::RpcMethod rpcmethod_NFSPROC_MKNOD_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* context, const ::nfs::NULLargs* request, ::nfs::NULLres* response);
    virtual ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* context, const ::nfs::GETATTRargs* request, ::nfs::GETATTRres* response);
    virtual ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* context, const ::nfs::MKNODargs* request, ::nfs::MKNODres* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NFSPROC_NULL() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_NULL(::grpc::ServerContext* context, ::nfs::NULLargs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::NULLres>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NFSPROC_GETATTR() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_GETATTR(::grpc::ServerContext* context, ::nfs::GETATTRargs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::GETATTRres>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NFSPROC_MKNOD() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_MKNOD(::grpc::ServerContext* context, ::nfs::MKNODargs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::MKNODres>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NFSPROC_NULL<WithAsyncMethod_NFSPROC_GETATTR<WithAsyncMethod_NFSPROC_MKNOD<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NFSPROC_NULL() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::nfs::NULLargs, ::nfs::NULLres>(
          [this](::grpc::ServerContext* context,
                 const ::nfs::NULLargs* request,
                 ::nfs::NULLres* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NFSPROC_NULL(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NFSPROC_NULL(
        ::grpc::experimental::MessageAllocator< ::nfs::NULLargs, ::nfs::NULLres>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nfs::NULLargs, ::nfs::NULLres>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NFSPROC_GETATTR() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::nfs::GETATTRargs, ::nfs::GETATTRres>(
          [this](::grpc::ServerContext* context,
                 const ::nfs::GETATTRargs* request,
                 ::nfs::GETATTRres* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NFSPROC_GETATTR(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NFSPROC_GETATTR(
        ::grpc::experimental::MessageAllocator< ::nfs::GETATTRargs, ::nfs::GETATTRres>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nfs::GETATTRargs, ::nfs::GETATTRres>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NFSPROC_MKNOD() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::nfs::MKNODargs, ::nfs::MKNODres>(
          [this](::grpc::ServerContext* context,
                 const ::nfs::MKNODargs* request,
                 ::nfs::MKNODres* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NFSPROC_MKNOD(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NFSPROC_MKNOD(
        ::grpc::experimental::MessageAllocator< ::nfs::MKNODargs, ::nfs::MKNODres>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nfs::MKNODargs, ::nfs::MKNODres>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_NFSPROC_NULL<ExperimentalWithCallbackMethod_NFSPROC_GETATTR<ExperimentalWithCallbackMethod_NFSPROC_MKNOD<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NFSPROC_NULL() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NFSPROC_GETATTR() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NFSPROC_MKNOD() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NFSPROC_NULL() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_NULL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NFSPROC_GETATTR() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_GETATTR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NFSPROC_MKNOD() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFSPROC_MKNOD(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NFSPROC_NULL() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NFSPROC_NULL(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NFSPROC_GETATTR() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NFSPROC_GETATTR(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NFSPROC_MKNOD() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NFSPROC_MKNOD(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NFSPROC_NULL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NFSPROC_NULL() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nfs::NULLargs, ::nfs::NULLres>(std::bind(&WithStreamedUnaryMethod_NFSPROC_NULL<BaseClass>::StreamedNFSPROC_NULL, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NFSPROC_NULL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NFSPROC_NULL(::grpc::ServerContext* /*context*/, const ::nfs::NULLargs* /*request*/, ::nfs::NULLres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNFSPROC_NULL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfs::NULLargs,::nfs::NULLres>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NFSPROC_GETATTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NFSPROC_GETATTR() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nfs::GETATTRargs, ::nfs::GETATTRres>(std::bind(&WithStreamedUnaryMethod_NFSPROC_GETATTR<BaseClass>::StreamedNFSPROC_GETATTR, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NFSPROC_GETATTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NFSPROC_GETATTR(::grpc::ServerContext* /*context*/, const ::nfs::GETATTRargs* /*request*/, ::nfs::GETATTRres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNFSPROC_GETATTR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfs::GETATTRargs,::nfs::GETATTRres>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NFSPROC_MKNOD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NFSPROC_MKNOD() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nfs::MKNODargs, ::nfs::MKNODres>(std::bind(&WithStreamedUnaryMethod_NFSPROC_MKNOD<BaseClass>::StreamedNFSPROC_MKNOD, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NFSPROC_MKNOD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NFSPROC_MKNOD(::grpc::ServerContext* /*context*/, const ::nfs::MKNODargs* /*request*/, ::nfs::MKNODres* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNFSPROC_MKNOD(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfs::MKNODargs,::nfs::MKNODres>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NFSPROC_NULL<WithStreamedUnaryMethod_NFSPROC_GETATTR<WithStreamedUnaryMethod_NFSPROC_MKNOD<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NFSPROC_NULL<WithStreamedUnaryMethod_NFSPROC_GETATTR<WithStreamedUnaryMethod_NFSPROC_MKNOD<Service > > > StreamedService;
};

}  // namespace nfs


#endif  // GRPC_nfs_2eproto__INCLUDED
