// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nfs;

// Interface exported by the server.
service NFS {
  
  rpc NFSPROC_NULL(NULLargs) returns (NULLres) {}
  
  rpc NFSPROC_GETATTR(GETATTRargs) returns (GETATTRres) {}

  rpc NFSPROC_MKNOD(MKNODargs) returns (MKNODres) {}

  rpc NFSPROC_MKDIR(MKDIRargs) returns (MKDIRres) {}

  rpc NFSPROC_RMDIR(RMDIRargs) returns (RMDIRres) {}

  rpc NFSPROC_RENAME(RENAMEargs) returns (RENAMEres) {}  

  rpc NFSPROC_OPEN(OPENargs) returns (OPENres) {}

  rpc NFSPROC_RELEASE(RELEASEargs) returns (RELEASEres) {}

  rpc NFSPROC_READ(READargs) returns (READres) {}

  rpc NFSPROC_WRITE(WRITEargs) returns (WRITEres) {}

  rpc NFSPROC_FGETATTR(FGETATTRargs) returns (FGETATTRres) {}

  rpc NFSPROC_READDIR(READDIRargs) returns (READDIRres) {}

  rpc RECOVERY(stream RECOVERYargs) returns (stream RECOVERYres) {}
}

// A Message is a message sent while at a given point.

message TimeSpec {
  int64 tv_sec = 1;
  int64 tv_nsec = 2;
}

message Stat {
  uint64 st_dev = 1;
  uint64 st_ino = 2;
  uint32 st_mode = 3;
  uint32 st_nlink = 4;
  uint32 st_uid = 5;
  uint32 st_gid = 6;
  uint64 st_rdev = 7;
  int64 st_size = 8;
  int64 st_blksize = 9;
  int64 st_blocks = 10;
  TimeSpec st_atime_ = 11;
  TimeSpec st_mtime_ = 12;
  TimeSpec st_ctime_ = 13;
}

message NULLargs {
}

message NULLres {
}

message GETATTRargs {
  string pathname = 1;
  string rpc_id = 2;
}

message GETATTRres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
  Stat stat = 3;
}

message MKNODargs {
  string pathname = 1;
  uint32 mode = 2;
  uint64 dev = 3;
  string rpc_id = 4;
}

message MKNODres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message MKDIRargs {
  string pathname = 1;
  uint32 mode = 2;
  string rpc_id = 3;
}

message MKDIRres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message RMDIRargs {
  string pathname = 1;
  string rpc_id = 2;
}

message RMDIRres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message RENAMEargs {
  string oldpathname = 1;
  string newpathname = 2;  
  string rpc_id = 3;
}

message RENAMEres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message OPENargs {
  string pathname = 1;
  int32 oflag = 2;
  string rpc_id = 3;
}

message OPENres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message RELEASEargs {
  int32 fh = 1;
  string rpc_id = 2;
}

message RELEASEres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
}

message READargs {
  int32 fh = 1;
  uint64 size = 2;
  int64 offset = 3;
  string rpc_id = 4;
}

message READres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
  bytes data = 3;
}

message WRITEargs {
  int32 fh = 1;
  uint64 size = 2;
  int64 offset = 3;
  bytes data = 4;
  string rpc_id = 5;
}

message WRITEres {
  int64 syscall_value = 1;
  int32 syscall_errno = 2;
}

message FGETATTRargs {
  int32 fh = 1;
  string rpc_id = 2;
}

message FGETATTRres {
  int32 syscall_value = 1;
  int32 syscall_errno = 2;
  Stat stat = 3;
}

message READDIRargs {
  string pathname = 1;
  string rpc_id = 2;
}

message READDIRres {
  int64 syscall_value = 1;
  int32 syscall_errno = 2;
  repeated string filename = 3;
  repeated Stat stat = 4;
}

message RECOVERYargs {
  uint32 client_id = 1;
  repeated string serialized_args = 2;
}

message RECOVERYres {
  repeated string rpcid = 1;
  int32 ack = 2;
}