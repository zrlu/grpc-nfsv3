// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs.proto

#include "nfs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stat_nfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSpec_nfs_2eproto;
namespace nfs {
class TimeSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSpec> _instance;
} _TimeSpec_default_instance_;
class StatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stat> _instance;
} _Stat_default_instance_;
class NULLargsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NULLargs> _instance;
} _NULLargs_default_instance_;
class NULLresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NULLres> _instance;
} _NULLres_default_instance_;
class GETATTRargsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GETATTRargs> _instance;
} _GETATTRargs_default_instance_;
class GETATTRresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GETATTRres> _instance;
} _GETATTRres_default_instance_;
class MKNODargsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MKNODargs> _instance;
} _MKNODargs_default_instance_;
class MKNODresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MKNODres> _instance;
} _MKNODres_default_instance_;
}  // namespace nfs
static void InitDefaultsscc_info_GETATTRargs_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_GETATTRargs_default_instance_;
    new (ptr) ::nfs::GETATTRargs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::GETATTRargs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GETATTRargs_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GETATTRargs_nfs_2eproto}, {}};

static void InitDefaultsscc_info_GETATTRres_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_GETATTRres_default_instance_;
    new (ptr) ::nfs::GETATTRres();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::GETATTRres::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GETATTRres_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GETATTRres_nfs_2eproto}, {
      &scc_info_Stat_nfs_2eproto.base,}};

static void InitDefaultsscc_info_MKNODargs_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_MKNODargs_default_instance_;
    new (ptr) ::nfs::MKNODargs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::MKNODargs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MKNODargs_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MKNODargs_nfs_2eproto}, {}};

static void InitDefaultsscc_info_MKNODres_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_MKNODres_default_instance_;
    new (ptr) ::nfs::MKNODres();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::MKNODres::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MKNODres_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MKNODres_nfs_2eproto}, {}};

static void InitDefaultsscc_info_NULLargs_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_NULLargs_default_instance_;
    new (ptr) ::nfs::NULLargs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::NULLargs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NULLargs_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NULLargs_nfs_2eproto}, {}};

static void InitDefaultsscc_info_NULLres_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_NULLres_default_instance_;
    new (ptr) ::nfs::NULLres();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::NULLres::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NULLres_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NULLres_nfs_2eproto}, {}};

static void InitDefaultsscc_info_Stat_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_Stat_default_instance_;
    new (ptr) ::nfs::Stat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::Stat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stat_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stat_nfs_2eproto}, {
      &scc_info_TimeSpec_nfs_2eproto.base,}};

static void InitDefaultsscc_info_TimeSpec_nfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nfs::_TimeSpec_default_instance_;
    new (ptr) ::nfs::TimeSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nfs::TimeSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSpec_nfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeSpec_nfs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nfs_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nfs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nfs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nfs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::TimeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::TimeSpec, tv_sec_),
  PROTOBUF_FIELD_OFFSET(::nfs::TimeSpec, tv_nsec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_dev_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_ino_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_mode_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_nlink_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_uid_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_gid_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_rdev_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, off_t_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_atime__),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_mtime__),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_ctime__),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_blksize_),
  PROTOBUF_FIELD_OFFSET(::nfs::Stat, st_blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::NULLargs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::NULLres, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::GETATTRargs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::GETATTRargs, pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::GETATTRres, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::GETATTRres, syscall_errno_),
  PROTOBUF_FIELD_OFFSET(::nfs::GETATTRres, stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODargs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODargs, pathname_),
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODargs, mode_),
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODargs, dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODres, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nfs::MKNODres, syscall_errno_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nfs::TimeSpec)},
  { 7, -1, sizeof(::nfs::Stat)},
  { 25, -1, sizeof(::nfs::NULLargs)},
  { 30, -1, sizeof(::nfs::NULLres)},
  { 35, -1, sizeof(::nfs::GETATTRargs)},
  { 41, -1, sizeof(::nfs::GETATTRres)},
  { 48, -1, sizeof(::nfs::MKNODargs)},
  { 56, -1, sizeof(::nfs::MKNODres)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_TimeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_NULLargs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_NULLres_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_GETATTRargs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_GETATTRres_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_MKNODargs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nfs::_MKNODres_default_instance_),
};

const char descriptor_table_protodef_nfs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnfs.proto\022\003nfs\032\014struct.proto\"+\n\010TimeSp"
  "ec\022\016\n\006tv_sec\030\001 \001(\003\022\017\n\007tv_nsec\030\002 \001(\003\"\226\002\n\004"
  "Stat\022\016\n\006st_dev\030\001 \001(\004\022\016\n\006st_ino\030\002 \001(\004\022\017\n\007"
  "st_mode\030\003 \001(\r\022\020\n\010st_nlink\030\004 \001(\r\022\016\n\006st_ui"
  "d\030\005 \001(\r\022\016\n\006st_gid\030\006 \001(\r\022\017\n\007st_rdev\030\007 \001(\004"
  "\022\r\n\005off_t\030\010 \001(\003\022 \n\tst_atime_\030\t \001(\0132\r.nfs"
  ".TimeSpec\022 \n\tst_mtime_\030\n \001(\0132\r.nfs.TimeS"
  "pec\022 \n\tst_ctime_\030\013 \001(\0132\r.nfs.TimeSpec\022\022\n"
  "\nst_blksize\030\014 \001(\003\022\021\n\tst_blocks\030\r \001(\003\"\n\n\010"
  "NULLargs\"\t\n\007NULLres\"\037\n\013GETATTRargs\022\020\n\010pa"
  "thname\030\001 \001(\t\"<\n\nGETATTRres\022\025\n\rsyscall_er"
  "rno\030\001 \001(\005\022\027\n\004stat\030\002 \001(\0132\t.nfs.Stat\"8\n\tMK"
  "NODargs\022\020\n\010pathname\030\001 \001(\t\022\014\n\004mode\030\002 \001(\r\022"
  "\013\n\003dev\030\003 \001(\004\"!\n\010MKNODres\022\025\n\rsyscall_errn"
  "o\030\001 \001(\0052\236\001\n\003NFS\022-\n\014NFSPROC_NULL\022\r.nfs.NU"
  "LLargs\032\014.nfs.NULLres\"\000\0226\n\017NFSPROC_GETATT"
  "R\022\020.nfs.GETATTRargs\032\017.nfs.GETATTRres\"\000\0220"
  "\n\rNFSPROC_MKNOD\022\016.nfs.MKNODargs\032\r.nfs.MK"
  "NODres\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nfs_2eproto_deps[1] = {
  &::descriptor_table_struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nfs_2eproto_sccs[8] = {
  &scc_info_GETATTRargs_nfs_2eproto.base,
  &scc_info_GETATTRres_nfs_2eproto.base,
  &scc_info_MKNODargs_nfs_2eproto.base,
  &scc_info_MKNODres_nfs_2eproto.base,
  &scc_info_NULLargs_nfs_2eproto.base,
  &scc_info_NULLres_nfs_2eproto.base,
  &scc_info_Stat_nfs_2eproto.base,
  &scc_info_TimeSpec_nfs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nfs_2eproto_once;
static bool descriptor_table_nfs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nfs_2eproto = {
  &descriptor_table_nfs_2eproto_initialized, descriptor_table_protodef_nfs_2eproto, "nfs.proto", 736,
  &descriptor_table_nfs_2eproto_once, descriptor_table_nfs_2eproto_sccs, descriptor_table_nfs_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_nfs_2eproto::offsets,
  file_level_metadata_nfs_2eproto, 8, file_level_enum_descriptors_nfs_2eproto, file_level_service_descriptors_nfs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nfs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nfs_2eproto), true);
namespace nfs {

// ===================================================================

void TimeSpec::InitAsDefaultInstance() {
}
class TimeSpec::_Internal {
 public:
};

TimeSpec::TimeSpec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.TimeSpec)
}
TimeSpec::TimeSpec(const TimeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tv_sec_, &from.tv_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tv_nsec_) -
    reinterpret_cast<char*>(&tv_sec_)) + sizeof(tv_nsec_));
  // @@protoc_insertion_point(copy_constructor:nfs.TimeSpec)
}

void TimeSpec::SharedCtor() {
  ::memset(&tv_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tv_nsec_) -
      reinterpret_cast<char*>(&tv_sec_)) + sizeof(tv_nsec_));
}

TimeSpec::~TimeSpec() {
  // @@protoc_insertion_point(destructor:nfs.TimeSpec)
  SharedDtor();
}

void TimeSpec::SharedDtor() {
}

void TimeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSpec& TimeSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSpec_nfs_2eproto.base);
  return *internal_default_instance();
}


void TimeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.TimeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tv_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tv_nsec_) -
      reinterpret_cast<char*>(&tv_sec_)) + sizeof(tv_nsec_));
  _internal_metadata_.Clear();
}

const char* TimeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 tv_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tv_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tv_nsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tv_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSpec::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.TimeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tv_sec = 1;
  if (this->tv_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tv_sec(), target);
  }

  // int64 tv_nsec = 2;
  if (this->tv_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tv_nsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.TimeSpec)
  return target;
}

size_t TimeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.TimeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 tv_sec = 1;
  if (this->tv_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tv_sec());
  }

  // int64 tv_nsec = 2;
  if (this->tv_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tv_nsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.TimeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.TimeSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.TimeSpec)
    MergeFrom(*source);
  }
}

void TimeSpec::MergeFrom(const TimeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.TimeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tv_sec() != 0) {
    _internal_set_tv_sec(from._internal_tv_sec());
  }
  if (from.tv_nsec() != 0) {
    _internal_set_tv_nsec(from._internal_tv_nsec());
  }
}

void TimeSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.TimeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpec::CopyFrom(const TimeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.TimeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpec::IsInitialized() const {
  return true;
}

void TimeSpec::InternalSwap(TimeSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tv_sec_, other->tv_sec_);
  swap(tv_nsec_, other->tv_nsec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stat::InitAsDefaultInstance() {
  ::nfs::_Stat_default_instance_._instance.get_mutable()->st_atime__ = const_cast< ::nfs::TimeSpec*>(
      ::nfs::TimeSpec::internal_default_instance());
  ::nfs::_Stat_default_instance_._instance.get_mutable()->st_mtime__ = const_cast< ::nfs::TimeSpec*>(
      ::nfs::TimeSpec::internal_default_instance());
  ::nfs::_Stat_default_instance_._instance.get_mutable()->st_ctime__ = const_cast< ::nfs::TimeSpec*>(
      ::nfs::TimeSpec::internal_default_instance());
}
class Stat::_Internal {
 public:
  static const ::nfs::TimeSpec& st_atime_(const Stat* msg);
  static const ::nfs::TimeSpec& st_mtime_(const Stat* msg);
  static const ::nfs::TimeSpec& st_ctime_(const Stat* msg);
};

const ::nfs::TimeSpec&
Stat::_Internal::st_atime_(const Stat* msg) {
  return *msg->st_atime__;
}
const ::nfs::TimeSpec&
Stat::_Internal::st_mtime_(const Stat* msg) {
  return *msg->st_mtime__;
}
const ::nfs::TimeSpec&
Stat::_Internal::st_ctime_(const Stat* msg) {
  return *msg->st_ctime__;
}
Stat::Stat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.Stat)
}
Stat::Stat(const Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_st_atime_()) {
    st_atime__ = new ::nfs::TimeSpec(*from.st_atime__);
  } else {
    st_atime__ = nullptr;
  }
  if (from._internal_has_st_mtime_()) {
    st_mtime__ = new ::nfs::TimeSpec(*from.st_mtime__);
  } else {
    st_mtime__ = nullptr;
  }
  if (from._internal_has_st_ctime_()) {
    st_ctime__ = new ::nfs::TimeSpec(*from.st_ctime__);
  } else {
    st_ctime__ = nullptr;
  }
  ::memcpy(&st_dev_, &from.st_dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&st_blocks_) -
    reinterpret_cast<char*>(&st_dev_)) + sizeof(st_blocks_));
  // @@protoc_insertion_point(copy_constructor:nfs.Stat)
}

void Stat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stat_nfs_2eproto.base);
  ::memset(&st_atime__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_blocks_) -
      reinterpret_cast<char*>(&st_atime__)) + sizeof(st_blocks_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:nfs.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  if (this != internal_default_instance()) delete st_atime__;
  if (this != internal_default_instance()) delete st_mtime__;
  if (this != internal_default_instance()) delete st_ctime__;
}

void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stat& Stat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stat_nfs_2eproto.base);
  return *internal_default_instance();
}


void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && st_atime__ != nullptr) {
    delete st_atime__;
  }
  st_atime__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && st_mtime__ != nullptr) {
    delete st_mtime__;
  }
  st_mtime__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && st_ctime__ != nullptr) {
    delete st_ctime__;
  }
  st_ctime__ = nullptr;
  ::memset(&st_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_blocks_) -
      reinterpret_cast<char*>(&st_dev_)) + sizeof(st_blocks_));
  _internal_metadata_.Clear();
}

const char* Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 st_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          st_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          st_ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 st_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          st_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 st_nlink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          st_nlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 st_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          st_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 st_gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          st_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 st_rdev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          st_rdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 off_t = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          off_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nfs.TimeSpec st_atime_ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_atime_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nfs.TimeSpec st_mtime_ = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_mtime_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nfs.TimeSpec st_ctime_ = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_ctime_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 st_blksize = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          st_blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 st_blocks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          st_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_st_dev(), target);
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_st_ino(), target);
  }

  // uint32 st_mode = 3;
  if (this->st_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_st_mode(), target);
  }

  // uint32 st_nlink = 4;
  if (this->st_nlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_st_nlink(), target);
  }

  // uint32 st_uid = 5;
  if (this->st_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_st_uid(), target);
  }

  // uint32 st_gid = 6;
  if (this->st_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_st_gid(), target);
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_st_rdev(), target);
  }

  // int64 off_t = 8;
  if (this->off_t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_off_t(), target);
  }

  // .nfs.TimeSpec st_atime_ = 9;
  if (this->has_st_atime_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::st_atime_(this), target, stream);
  }

  // .nfs.TimeSpec st_mtime_ = 10;
  if (this->has_st_mtime_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::st_mtime_(this), target, stream);
  }

  // .nfs.TimeSpec st_ctime_ = 11;
  if (this->has_st_ctime_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::st_ctime_(this), target, stream);
  }

  // int64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_st_blksize(), target);
  }

  // int64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_st_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.Stat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nfs.TimeSpec st_atime_ = 9;
  if (this->has_st_atime_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_atime__);
  }

  // .nfs.TimeSpec st_mtime_ = 10;
  if (this->has_st_mtime_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_mtime__);
  }

  // .nfs.TimeSpec st_ctime_ = 11;
  if (this->has_st_ctime_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_ctime__);
  }

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_dev());
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_ino());
  }

  // uint32 st_mode = 3;
  if (this->st_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_st_mode());
  }

  // uint32 st_nlink = 4;
  if (this->st_nlink() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_st_nlink());
  }

  // uint32 st_uid = 5;
  if (this->st_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_st_uid());
  }

  // uint32 st_gid = 6;
  if (this->st_gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_st_gid());
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_st_rdev());
  }

  // int64 off_t = 8;
  if (this->off_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_off_t());
  }

  // int64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_st_blksize());
  }

  // int64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_st_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Stat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.Stat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.Stat)
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_st_atime_()) {
    _internal_mutable_st_atime_()->::nfs::TimeSpec::MergeFrom(from._internal_st_atime_());
  }
  if (from.has_st_mtime_()) {
    _internal_mutable_st_mtime_()->::nfs::TimeSpec::MergeFrom(from._internal_st_mtime_());
  }
  if (from.has_st_ctime_()) {
    _internal_mutable_st_ctime_()->::nfs::TimeSpec::MergeFrom(from._internal_st_ctime_());
  }
  if (from.st_dev() != 0) {
    _internal_set_st_dev(from._internal_st_dev());
  }
  if (from.st_ino() != 0) {
    _internal_set_st_ino(from._internal_st_ino());
  }
  if (from.st_mode() != 0) {
    _internal_set_st_mode(from._internal_st_mode());
  }
  if (from.st_nlink() != 0) {
    _internal_set_st_nlink(from._internal_st_nlink());
  }
  if (from.st_uid() != 0) {
    _internal_set_st_uid(from._internal_st_uid());
  }
  if (from.st_gid() != 0) {
    _internal_set_st_gid(from._internal_st_gid());
  }
  if (from.st_rdev() != 0) {
    _internal_set_st_rdev(from._internal_st_rdev());
  }
  if (from.off_t() != 0) {
    _internal_set_off_t(from._internal_off_t());
  }
  if (from.st_blksize() != 0) {
    _internal_set_st_blksize(from._internal_st_blksize());
  }
  if (from.st_blocks() != 0) {
    _internal_set_st_blocks(from._internal_st_blocks());
  }
}

void Stat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::InternalSwap(Stat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(st_atime__, other->st_atime__);
  swap(st_mtime__, other->st_mtime__);
  swap(st_ctime__, other->st_ctime__);
  swap(st_dev_, other->st_dev_);
  swap(st_ino_, other->st_ino_);
  swap(st_mode_, other->st_mode_);
  swap(st_nlink_, other->st_nlink_);
  swap(st_uid_, other->st_uid_);
  swap(st_gid_, other->st_gid_);
  swap(st_rdev_, other->st_rdev_);
  swap(off_t_, other->off_t_);
  swap(st_blksize_, other->st_blksize_);
  swap(st_blocks_, other->st_blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NULLargs::InitAsDefaultInstance() {
}
class NULLargs::_Internal {
 public:
};

NULLargs::NULLargs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.NULLargs)
}
NULLargs::NULLargs(const NULLargs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nfs.NULLargs)
}

void NULLargs::SharedCtor() {
}

NULLargs::~NULLargs() {
  // @@protoc_insertion_point(destructor:nfs.NULLargs)
  SharedDtor();
}

void NULLargs::SharedDtor() {
}

void NULLargs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NULLargs& NULLargs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NULLargs_nfs_2eproto.base);
  return *internal_default_instance();
}


void NULLargs::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.NULLargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* NULLargs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NULLargs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.NULLargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.NULLargs)
  return target;
}

size_t NULLargs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.NULLargs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NULLargs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.NULLargs)
  GOOGLE_DCHECK_NE(&from, this);
  const NULLargs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NULLargs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.NULLargs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.NULLargs)
    MergeFrom(*source);
  }
}

void NULLargs::MergeFrom(const NULLargs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.NULLargs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NULLargs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.NULLargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NULLargs::CopyFrom(const NULLargs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.NULLargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NULLargs::IsInitialized() const {
  return true;
}

void NULLargs::InternalSwap(NULLargs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NULLargs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NULLres::InitAsDefaultInstance() {
}
class NULLres::_Internal {
 public:
};

NULLres::NULLres()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.NULLres)
}
NULLres::NULLres(const NULLres& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nfs.NULLres)
}

void NULLres::SharedCtor() {
}

NULLres::~NULLres() {
  // @@protoc_insertion_point(destructor:nfs.NULLres)
  SharedDtor();
}

void NULLres::SharedDtor() {
}

void NULLres::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NULLres& NULLres::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NULLres_nfs_2eproto.base);
  return *internal_default_instance();
}


void NULLres::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.NULLres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* NULLres::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NULLres::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.NULLres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.NULLres)
  return target;
}

size_t NULLres::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.NULLres)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NULLres::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.NULLres)
  GOOGLE_DCHECK_NE(&from, this);
  const NULLres* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NULLres>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.NULLres)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.NULLres)
    MergeFrom(*source);
  }
}

void NULLres::MergeFrom(const NULLres& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.NULLres)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NULLres::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.NULLres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NULLres::CopyFrom(const NULLres& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.NULLres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NULLres::IsInitialized() const {
  return true;
}

void NULLres::InternalSwap(NULLres* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NULLres::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GETATTRargs::InitAsDefaultInstance() {
}
class GETATTRargs::_Internal {
 public:
};

GETATTRargs::GETATTRargs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.GETATTRargs)
}
GETATTRargs::GETATTRargs(const GETATTRargs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pathname().empty()) {
    pathname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  // @@protoc_insertion_point(copy_constructor:nfs.GETATTRargs)
}

void GETATTRargs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GETATTRargs_nfs_2eproto.base);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GETATTRargs::~GETATTRargs() {
  // @@protoc_insertion_point(destructor:nfs.GETATTRargs)
  SharedDtor();
}

void GETATTRargs::SharedDtor() {
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GETATTRargs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GETATTRargs& GETATTRargs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GETATTRargs_nfs_2eproto.base);
  return *internal_default_instance();
}


void GETATTRargs::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.GETATTRargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GETATTRargs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_pathname(), ptr, ctx, "nfs.GETATTRargs.pathname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GETATTRargs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.GETATTRargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (this->pathname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nfs.GETATTRargs.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.GETATTRargs)
  return target;
}

size_t GETATTRargs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.GETATTRargs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (this->pathname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GETATTRargs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.GETATTRargs)
  GOOGLE_DCHECK_NE(&from, this);
  const GETATTRargs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GETATTRargs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.GETATTRargs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.GETATTRargs)
    MergeFrom(*source);
  }
}

void GETATTRargs::MergeFrom(const GETATTRargs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.GETATTRargs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pathname().size() > 0) {

    pathname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
}

void GETATTRargs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.GETATTRargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GETATTRargs::CopyFrom(const GETATTRargs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.GETATTRargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GETATTRargs::IsInitialized() const {
  return true;
}

void GETATTRargs::InternalSwap(GETATTRargs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pathname_.Swap(&other->pathname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GETATTRargs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GETATTRres::InitAsDefaultInstance() {
  ::nfs::_GETATTRres_default_instance_._instance.get_mutable()->stat_ = const_cast< ::nfs::Stat*>(
      ::nfs::Stat::internal_default_instance());
}
class GETATTRres::_Internal {
 public:
  static const ::nfs::Stat& stat(const GETATTRres* msg);
};

const ::nfs::Stat&
GETATTRres::_Internal::stat(const GETATTRres* msg) {
  return *msg->stat_;
}
GETATTRres::GETATTRres()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.GETATTRres)
}
GETATTRres::GETATTRres(const GETATTRres& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stat()) {
    stat_ = new ::nfs::Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  syscall_errno_ = from.syscall_errno_;
  // @@protoc_insertion_point(copy_constructor:nfs.GETATTRres)
}

void GETATTRres::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GETATTRres_nfs_2eproto.base);
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&syscall_errno_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(syscall_errno_));
}

GETATTRres::~GETATTRres() {
  // @@protoc_insertion_point(destructor:nfs.GETATTRres)
  SharedDtor();
}

void GETATTRres::SharedDtor() {
  if (this != internal_default_instance()) delete stat_;
}

void GETATTRres::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GETATTRres& GETATTRres::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GETATTRres_nfs_2eproto.base);
  return *internal_default_instance();
}


void GETATTRres::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.GETATTRres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  syscall_errno_ = 0;
  _internal_metadata_.Clear();
}

const char* GETATTRres::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 syscall_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          syscall_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nfs.Stat stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GETATTRres::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.GETATTRres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 syscall_errno = 1;
  if (this->syscall_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_syscall_errno(), target);
  }

  // .nfs.Stat stat = 2;
  if (this->has_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.GETATTRres)
  return target;
}

size_t GETATTRres::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.GETATTRres)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nfs.Stat stat = 2;
  if (this->has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int32 syscall_errno = 1;
  if (this->syscall_errno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syscall_errno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GETATTRres::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.GETATTRres)
  GOOGLE_DCHECK_NE(&from, this);
  const GETATTRres* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GETATTRres>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.GETATTRres)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.GETATTRres)
    MergeFrom(*source);
  }
}

void GETATTRres::MergeFrom(const GETATTRres& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.GETATTRres)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stat()) {
    _internal_mutable_stat()->::nfs::Stat::MergeFrom(from._internal_stat());
  }
  if (from.syscall_errno() != 0) {
    _internal_set_syscall_errno(from._internal_syscall_errno());
  }
}

void GETATTRres::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.GETATTRres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GETATTRres::CopyFrom(const GETATTRres& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.GETATTRres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GETATTRres::IsInitialized() const {
  return true;
}

void GETATTRres::InternalSwap(GETATTRres* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stat_, other->stat_);
  swap(syscall_errno_, other->syscall_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GETATTRres::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MKNODargs::InitAsDefaultInstance() {
}
class MKNODargs::_Internal {
 public:
};

MKNODargs::MKNODargs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.MKNODargs)
}
MKNODargs::MKNODargs(const MKNODargs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pathname().empty()) {
    pathname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  ::memcpy(&dev_, &from.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&dev_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:nfs.MKNODargs)
}

void MKNODargs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MKNODargs_nfs_2eproto.base);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&dev_)) + sizeof(mode_));
}

MKNODargs::~MKNODargs() {
  // @@protoc_insertion_point(destructor:nfs.MKNODargs)
  SharedDtor();
}

void MKNODargs::SharedDtor() {
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MKNODargs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MKNODargs& MKNODargs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MKNODargs_nfs_2eproto.base);
  return *internal_default_instance();
}


void MKNODargs::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.MKNODargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&dev_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

const char* MKNODargs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_pathname(), ptr, ctx, "nfs.MKNODargs.pathname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MKNODargs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.MKNODargs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathname = 1;
  if (this->pathname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nfs.MKNODargs.pathname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint64 dev = 3;
  if (this->dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.MKNODargs)
  return target;
}

size_t MKNODargs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.MKNODargs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 1;
  if (this->pathname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // uint64 dev = 3;
  if (this->dev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dev());
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MKNODargs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.MKNODargs)
  GOOGLE_DCHECK_NE(&from, this);
  const MKNODargs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MKNODargs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.MKNODargs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.MKNODargs)
    MergeFrom(*source);
  }
}

void MKNODargs::MergeFrom(const MKNODargs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.MKNODargs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pathname().size() > 0) {

    pathname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathname_);
  }
  if (from.dev() != 0) {
    _internal_set_dev(from._internal_dev());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void MKNODargs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.MKNODargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MKNODargs::CopyFrom(const MKNODargs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.MKNODargs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MKNODargs::IsInitialized() const {
  return true;
}

void MKNODargs::InternalSwap(MKNODargs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pathname_.Swap(&other->pathname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dev_, other->dev_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MKNODargs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MKNODres::InitAsDefaultInstance() {
}
class MKNODres::_Internal {
 public:
};

MKNODres::MKNODres()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.MKNODres)
}
MKNODres::MKNODres(const MKNODres& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  syscall_errno_ = from.syscall_errno_;
  // @@protoc_insertion_point(copy_constructor:nfs.MKNODres)
}

void MKNODres::SharedCtor() {
  syscall_errno_ = 0;
}

MKNODres::~MKNODres() {
  // @@protoc_insertion_point(destructor:nfs.MKNODres)
  SharedDtor();
}

void MKNODres::SharedDtor() {
}

void MKNODres::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MKNODres& MKNODres::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MKNODres_nfs_2eproto.base);
  return *internal_default_instance();
}


void MKNODres::Clear() {
// @@protoc_insertion_point(message_clear_start:nfs.MKNODres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  syscall_errno_ = 0;
  _internal_metadata_.Clear();
}

const char* MKNODres::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 syscall_errno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          syscall_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MKNODres::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.MKNODres)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 syscall_errno = 1;
  if (this->syscall_errno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_syscall_errno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nfs.MKNODres)
  return target;
}

size_t MKNODres::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nfs.MKNODres)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 syscall_errno = 1;
  if (this->syscall_errno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syscall_errno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MKNODres::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nfs.MKNODres)
  GOOGLE_DCHECK_NE(&from, this);
  const MKNODres* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MKNODres>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nfs.MKNODres)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nfs.MKNODres)
    MergeFrom(*source);
  }
}

void MKNODres::MergeFrom(const MKNODres& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nfs.MKNODres)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.syscall_errno() != 0) {
    _internal_set_syscall_errno(from._internal_syscall_errno());
  }
}

void MKNODres::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nfs.MKNODres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MKNODres::CopyFrom(const MKNODres& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nfs.MKNODres)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MKNODres::IsInitialized() const {
  return true;
}

void MKNODres::InternalSwap(MKNODres* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(syscall_errno_, other->syscall_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MKNODres::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nfs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nfs::TimeSpec* Arena::CreateMaybeMessage< ::nfs::TimeSpec >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::TimeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::Stat* Arena::CreateMaybeMessage< ::nfs::Stat >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::NULLargs* Arena::CreateMaybeMessage< ::nfs::NULLargs >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::NULLargs >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::NULLres* Arena::CreateMaybeMessage< ::nfs::NULLres >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::NULLres >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::GETATTRargs* Arena::CreateMaybeMessage< ::nfs::GETATTRargs >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::GETATTRargs >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::GETATTRres* Arena::CreateMaybeMessage< ::nfs::GETATTRres >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::GETATTRres >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::MKNODargs* Arena::CreateMaybeMessage< ::nfs::MKNODargs >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::MKNODargs >(arena);
}
template<> PROTOBUF_NOINLINE ::nfs::MKNODres* Arena::CreateMaybeMessage< ::nfs::MKNODres >(Arena* arena) {
  return Arena::CreateInternal< ::nfs::MKNODres >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
